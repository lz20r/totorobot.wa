const { sendWarning } = require("../../functions/messages");
const { generateWAMessageFromContent, proto } = require("@whiskeysockets/baileys");
const dev = require("../../../settings.json").dev[0];
const prefix = require("../../../settings.json").prefix;

module.exports = {
  name: "category",
  description: "Muestra la ayuda de los comandos o las categorÃ­as solicitadas.",
  aliases: ["categorÃ­a", "categorias", "cat"],
  category: "general",
  subcategory: "information",
  usage: `${prefix}category <nÃºmero>`,
  cooldown: 5,

  async execute(totoro, msg, args) {
    const info = msg.messages[0];
    const from = info.key.remoteJid;

    const reply = (text) => {
      totoro.sendMessage(from, { text: text }, { quoted: info });
    };

    // Obtener todas las categorÃ­as disponibles
    const categories = [
      ...new Set(totoro.plugins.map((plugin) => plugin.category)),
    ].filter(Boolean);

    // Si no se proporciona un argumento, mostrar la lista de categorÃ­as
    if (!args[0]) {
      let categoryListMessage = `â•­â”€ðŸª¼ *${"CategorÃ­as disponibles"}* â”€âœ§\n`;

      categories.forEach((category, index) => {
        categoryListMessage += `â”‚ âž™ ${index + 1}. ${category.charAt(0).toUpperCase() + category.slice(1)}\n`;
      });

      categoryListMessage += `â•°â”€â”€â”€â”€â”€â”€â”€â”€âœ§\n`; 

      // Crear el texto del mensaje con forward y menciÃ³n
      const txt = `> Ejemplo: ${prefix}category 1`;
      const messageContent = {
        extendedTextMessage: {
          text: categoryListMessage + txt,
          contextInfo: {
            mentionedJid: [dev], // AÃ±adir el JID del owner a las menciones
            isForwarded: true,  // Indicar que es un mensaje reenviado
            forwardingScore: 1, // Especificar que ha sido reenviado
            isForwardedMessage: true, // Marcar como mensaje reenviado
            forwardedNewsletterMessageInfo: {
              newsletterJid: "120363322372961284@newsletter", // ID del canal de Totoro ðŸª¼
              newsletterName: "Canal de Totoro ðŸª¼", // Nombre del canal
              serverMessageId: -1, // ID del mensaje original (si es necesario)
            },
          },
        },
      };

      const protoMessage = proto.Message.fromObject(messageContent);
      const message = generateWAMessageFromContent(from, protoMessage, {
        quoted: msg.messages[0],  // Referenciar el mensaje original
      });

      // Enviar el mensaje reenviado con la lista de categorÃ­as
      await totoro.relayMessage(from, message.message, {
        messageId: message.key.id,
      });

      return;
    }

    // Si se proporciona un nÃºmero como argumento
    const categoryIndex = parseInt(args[0], 10) - 1;

    // Validar el nÃºmero ingresado
    if (isNaN(categoryIndex) || categoryIndex < 0 || categoryIndex >= categories.length) {
      return sendWarning(
        totoro,
        msg,
        "SelecciÃ³n invÃ¡lida",
        "Por favor, ingresa un nÃºmero vÃ¡lido correspondiente a una categorÃ­a."
      );
    }

    // Obtener la categorÃ­a seleccionada
    const selectedCategory = categories[categoryIndex].toLowerCase();

    // Filtrar por la categorÃ­a seleccionada
    const commandsInCategory = totoro.plugins.filter(
      (plugin) =>
        plugin.category && plugin.category.toLowerCase() === selectedCategory
    );

    // **Ahora procesamos los comandos en la categorÃ­a seleccionada**
    if (commandsInCategory.length > 0) {
      let categoryMessage = `â•­â”€ðŸª¼ *${selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)}* â”€âœ§\n`;

      // Agrupar por subcategorÃ­a
      const subcategories = {};

      commandsInCategory.forEach((plugin) => {
        if (!subcategories[plugin.subcategory]) {
          subcategories[plugin.subcategory] = [];
        }
        subcategories[plugin.subcategory].push(plugin);
      });

      // Crear el mensaje agrupado y ordenado por subcategorÃ­a
      Object.keys(subcategories).forEach((subcategory) => {
        subcategories[subcategory].sort((a, b) => a.name.localeCompare(b.name));

        categoryMessage += `â”‚ âž™ ${subcategory}\n`;
        subcategories[subcategory].forEach((plugin) => {
          categoryMessage += `â”‚    Â» \`${prefix}${plugin.name}\` - ${plugin.description}\n`;
        });
      });

      categoryMessage += "â•°â”€â”€â”€â”€â”€â”€â”€â”€âœ§";

      // Crear el mensaje reenviado con los comandos de la categorÃ­a seleccionada
      const txt = "Estos son los comandos disponibles en la categorÃ­a seleccionada.";
      const messageContent = {
        extendedTextMessage: {
          text: categoryMessage + txt,
          contextInfo: {
            mentionedJid: [dev], // AÃ±adir el JID del owner a las menciones
            isForwarded: true,  // Indicar que es un mensaje reenviado
            forwardingScore: 1, // Especificar que ha sido reenviado
            isForwardedMessage: true, // Marcar como mensaje reenviado
            forwardedNewsletterMessageInfo: {
              newsletterJid: "120363322372961284@newsletter", // ID del canal de Totoro ðŸª¼
              newsletterName: "Canal de Totoro ðŸª¼", // Nombre del canal
              serverMessageId: -1, // ID del mensaje original (si es necesario)
            },
          },
        },
      };

      const protoMessage = proto.Message.fromObject(messageContent);
      const message = generateWAMessageFromContent(from, protoMessage, {
        quoted: msg.messages[0],  // Referenciar el mensaje original
      });

      // Enviar el mensaje reenviado con los comandos de la categorÃ­a seleccionada
      await totoro.relayMessage(from, message.message, {
        messageId: message.key.id,
      });
    } else {
      return sendWarning(
        totoro,
        msg,
        "CategorÃ­a no encontrada",
        `La categorÃ­a seleccionada no tiene comandos.`
      );
    }
  },
};